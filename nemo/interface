###############################################################################################################################################
### NemoRecyclerView ##########################################################################################################################
###############################################################################################################################################

val header = NemoRecyclerView.model(headerDTO)
val accounts = NemoRecyclerView.model<AccountDTO>(accountDTOs) { acno + bkcd } // key: if not define then key is hashcode or null
val groups = nemoRecyclerView(orientation = RecyclerView.VERTICAL, reverseLayout = false) {
    useSnap = false
    group(model = header, view = HeaderItemBinding::inflate, tag = "header") {
        bind { data, binding ->
            println(groupPos)
            println(globalPos)
        }
        divider {
            sizeDp = 3
            color = "#ff00ff00"
            colorRes = R.color.divider
            drawableRes = R.drawable.divider
            show = { BEGINNING and MIDDLE and END }
        }
    }
    space {
        sizeDp = 100
        color = "#ff00ff00"
        colorRes = R.color.divider
        fillViewport = true
        fillWeight = 1
    }
    group(model = accounts, view = HeaderItemBinding::inflate, tag = "list") {
		allowDragAndDrop = false
		allowSwipeToDismiss = false
		bind { data, binding ->
			println(groupPos)
			println(globalPos)
		}
		placeHolder(num = 2) { binding ->
			println(groupPos)
			println(globalPos)
		}
    }
}
groups.bringForward("header")
groups.bringToFront("header")
groups.sendBackward("header")
groups.sendToBack("header")
groups.swap("header", "list")
